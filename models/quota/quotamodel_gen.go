// Code generated by goctl. DO NOT EDIT.

package quota

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	quotaFieldNames          = builder.RawFieldNames(&Quota{}, true)
	quotaRows                = strings.Join(quotaFieldNames, ",")
	quotaRowsExpectAutoSet   = strings.Join(stringx.Remove(quotaFieldNames, "id"), ",")
	quotaRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(quotaFieldNames, "id"))

	cachePublicQuotaIdPrefix = "cache:public:quota:id:"
)

type (
	quotaModel interface {
		Insert(ctx context.Context, data *Quota) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Quota, error)
		Update(ctx context.Context, data *Quota) error
		Delete(ctx context.Context, id int64) error
	}

	defaultQuotaModel struct {
		sqlc.CachedConn
		table string
	}

	Quota struct {
		Id        int64     `db:"id"`
		Amount    int64     `db:"amount"`
		CreatedAt time.Time `db:"created_at"`
		Username  string    `db:"username"`
	}
)

func newQuotaModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultQuotaModel {
	return &defaultQuotaModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."quota"`,
	}
}

func (m *defaultQuotaModel) withSession(session sqlx.Session) *defaultQuotaModel {
	return &defaultQuotaModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."quota"`,
	}
}

func (m *defaultQuotaModel) Delete(ctx context.Context, id int64) error {
	publicQuotaIdKey := fmt.Sprintf("%s%v", cachePublicQuotaIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicQuotaIdKey)
	return err
}

func (m *defaultQuotaModel) FindOne(ctx context.Context, id int64) (*Quota, error) {
	publicQuotaIdKey := fmt.Sprintf("%s%v", cachePublicQuotaIdPrefix, id)
	var resp Quota
	err := m.QueryRowCtx(ctx, &resp, publicQuotaIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", quotaRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQuotaModel) Insert(ctx context.Context, data *Quota) (sql.Result, error) {
	publicQuotaIdKey := fmt.Sprintf("%s%v", cachePublicQuotaIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, quotaRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Amount, data.CreatedAt, data.Username)
	}, publicQuotaIdKey)
	return ret, err
}

func (m *defaultQuotaModel) Update(ctx context.Context, data *Quota) error {
	publicQuotaIdKey := fmt.Sprintf("%s%v", cachePublicQuotaIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, quotaRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Amount, data.CreatedAt, data.Username)
	}, publicQuotaIdKey)
	return err
}

func (m *defaultQuotaModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicQuotaIdPrefix, primary)
}

func (m *defaultQuotaModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", quotaRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultQuotaModel) tableName() string {
	return m.table
}
