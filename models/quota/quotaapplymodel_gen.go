// Code generated by goctl. DO NOT EDIT.

package quota

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	quotaApplyFieldNames          = builder.RawFieldNames(&QuotaApply{}, true)
	quotaApplyRows                = strings.Join(quotaApplyFieldNames, ",")
	quotaApplyRowsExpectAutoSet   = strings.Join(stringx.Remove(quotaApplyFieldNames, "id"), ",")
	quotaApplyRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(quotaApplyFieldNames, "id"))

	cachePublicQuotaApplyIdPrefix = "cache:public:quotaApply:id:"
)

type (
	quotaApplyModel interface {
		Insert(ctx context.Context, data *QuotaApply) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*QuotaApply, error)
		Update(ctx context.Context, data *QuotaApply) error
		Delete(ctx context.Context, id int64) error
	}

	defaultQuotaApplyModel struct {
		sqlc.CachedConn
		table string
	}

	QuotaApply struct {
		Id        int64     `db:"id"`
		Amount    int64     `db:"amount"`
		Username  string    `db:"username"`
		CreatedAt time.Time `db:"created_at"`
	}
)

func newQuotaApplyModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultQuotaApplyModel {
	return &defaultQuotaApplyModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."quota_apply"`,
	}
}

func (m *defaultQuotaApplyModel) withSession(session sqlx.Session) *defaultQuotaApplyModel {
	return &defaultQuotaApplyModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."quota_apply"`,
	}
}

func (m *defaultQuotaApplyModel) Delete(ctx context.Context, id int64) error {
	publicQuotaApplyIdKey := fmt.Sprintf("%s%v", cachePublicQuotaApplyIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicQuotaApplyIdKey)
	return err
}

func (m *defaultQuotaApplyModel) FindOne(ctx context.Context, id int64) (*QuotaApply, error) {
	publicQuotaApplyIdKey := fmt.Sprintf("%s%v", cachePublicQuotaApplyIdPrefix, id)
	var resp QuotaApply
	err := m.QueryRowCtx(ctx, &resp, publicQuotaApplyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", quotaApplyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQuotaApplyModel) Insert(ctx context.Context, data *QuotaApply) (sql.Result, error) {
	publicQuotaApplyIdKey := fmt.Sprintf("%s%v", cachePublicQuotaApplyIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, quotaApplyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Amount, data.Username, data.CreatedAt)
	}, publicQuotaApplyIdKey)
	return ret, err
}

func (m *defaultQuotaApplyModel) Update(ctx context.Context, data *QuotaApply) error {
	publicQuotaApplyIdKey := fmt.Sprintf("%s%v", cachePublicQuotaApplyIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, quotaApplyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Amount, data.Username, data.CreatedAt)
	}, publicQuotaApplyIdKey)
	return err
}

func (m *defaultQuotaApplyModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicQuotaApplyIdPrefix, primary)
}

func (m *defaultQuotaApplyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", quotaApplyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultQuotaApplyModel) tableName() string {
	return m.table
}
