// Code generated by goctl. DO NOT EDIT.

package patient

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	patientCasesFieldNames          = builder.RawFieldNames(&PatientCases{}, true)
	patientCasesRows                = strings.Join(patientCasesFieldNames, ",")
	patientCasesRowsExpectAutoSet   = strings.Join(stringx.Remove(patientCasesFieldNames, "id"), ",")
	patientCasesRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(patientCasesFieldNames, "id"))

	cachePublicPatientCasesIdPrefix = "cache:public:patientCases:id:"
)

type (
	patientCasesModel interface {
		Insert(ctx context.Context, data *PatientCases) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PatientCases, error)
		Update(ctx context.Context, data *PatientCases) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPatientCasesModel struct {
		sqlc.CachedConn
		table string
	}

	PatientCases struct {
		Id         int64          `db:"id"`
		Body       sql.NullString `db:"body"`
		CreateTime time.Time      `db:"create_time"`
		Cid        string         `db:"cid"`
	}
)

func newPatientCasesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPatientCasesModel {
	return &defaultPatientCasesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."patient_cases"`,
	}
}

func (m *defaultPatientCasesModel) withSession(session sqlx.Session) *defaultPatientCasesModel {
	return &defaultPatientCasesModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."patient_cases"`,
	}
}

func (m *defaultPatientCasesModel) Delete(ctx context.Context, id int64) error {
	publicPatientCasesIdKey := fmt.Sprintf("%s%v", cachePublicPatientCasesIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicPatientCasesIdKey)
	return err
}

func (m *defaultPatientCasesModel) FindOne(ctx context.Context, id int64) (*PatientCases, error) {
	publicPatientCasesIdKey := fmt.Sprintf("%s%v", cachePublicPatientCasesIdPrefix, id)
	var resp PatientCases
	err := m.QueryRowCtx(ctx, &resp, publicPatientCasesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", patientCasesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPatientCasesModel) Insert(ctx context.Context, data *PatientCases) (sql.Result, error) {
	publicPatientCasesIdKey := fmt.Sprintf("%s%v", cachePublicPatientCasesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, patientCasesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Body, data.CreateTime, data.Cid)
	}, publicPatientCasesIdKey)
	return ret, err
}

func (m *defaultPatientCasesModel) Update(ctx context.Context, data *PatientCases) error {
	publicPatientCasesIdKey := fmt.Sprintf("%s%v", cachePublicPatientCasesIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, patientCasesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Body, data.CreateTime, data.Cid)
	}, publicPatientCasesIdKey)
	return err
}

func (m *defaultPatientCasesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicPatientCasesIdPrefix, primary)
}

func (m *defaultPatientCasesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", patientCasesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPatientCasesModel) tableName() string {
	return m.table
}
