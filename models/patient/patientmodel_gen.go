// Code generated by goctl. DO NOT EDIT.

package patient

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	patientFieldNames          = builder.RawFieldNames(&Patient{}, true)
	patientRows                = strings.Join(patientFieldNames, ",")
	patientRowsExpectAutoSet   = strings.Join(stringx.Remove(patientFieldNames, "id"), ",")
	patientRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(patientFieldNames, "id"))

	cachePublicPatientIdPrefix   = "cache:public:patient:id:"
	cachePublicPatientCodePrefix = "cache:public:patient:code:"
)

type (
	patientModel interface {
		Insert(ctx context.Context, data *Patient) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Patient, error)
		FindOneByCode(ctx context.Context, code string) (*Patient, error)
		Update(ctx context.Context, data *Patient) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPatientModel struct {
		sqlc.CachedConn
		table string
	}

	Patient struct {
		Id         int64     `db:"id"`
		Did        string    `db:"did"`
		Name       string    `db:"name"`
		Sex        string    `db:"sex"`
		Age        int64     `db:"age"`
		Code       string    `db:"code"`
		UploadTime time.Time `db:"upload_time"`
	}
)

func newPatientModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPatientModel {
	return &defaultPatientModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."patient"`,
	}
}

func (m *defaultPatientModel) withSession(session sqlx.Session) *defaultPatientModel {
	return &defaultPatientModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."patient"`,
	}
}

func (m *defaultPatientModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicPatientCodeKey := fmt.Sprintf("%s%v", cachePublicPatientCodePrefix, data.Code)
	publicPatientIdKey := fmt.Sprintf("%s%v", cachePublicPatientIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicPatientCodeKey, publicPatientIdKey)
	return err
}

func (m *defaultPatientModel) FindOne(ctx context.Context, id int64) (*Patient, error) {
	publicPatientIdKey := fmt.Sprintf("%s%v", cachePublicPatientIdPrefix, id)
	var resp Patient
	err := m.QueryRowCtx(ctx, &resp, publicPatientIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", patientRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPatientModel) FindOneByCode(ctx context.Context, code string) (*Patient, error) {
	publicPatientCodeKey := fmt.Sprintf("%s%v", cachePublicPatientCodePrefix, code)
	var resp Patient
	err := m.QueryRowIndexCtx(ctx, &resp, publicPatientCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where code = $1 limit 1", patientRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, code); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPatientModel) Insert(ctx context.Context, data *Patient) (sql.Result, error) {
	publicPatientCodeKey := fmt.Sprintf("%s%v", cachePublicPatientCodePrefix, data.Code)
	publicPatientIdKey := fmt.Sprintf("%s%v", cachePublicPatientIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, patientRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Did, data.Name, data.Sex, data.Age, data.Code, data.UploadTime)
	}, publicPatientCodeKey, publicPatientIdKey)
	return ret, err
}

func (m *defaultPatientModel) Update(ctx context.Context, newData *Patient) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicPatientCodeKey := fmt.Sprintf("%s%v", cachePublicPatientCodePrefix, data.Code)
	publicPatientIdKey := fmt.Sprintf("%s%v", cachePublicPatientIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, patientRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Did, newData.Name, newData.Sex, newData.Age, newData.Code, newData.UploadTime)
	}, publicPatientCodeKey, publicPatientIdKey)
	return err
}

func (m *defaultPatientModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicPatientIdPrefix, primary)
}

func (m *defaultPatientModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", patientRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPatientModel) tableName() string {
	return m.table
}
