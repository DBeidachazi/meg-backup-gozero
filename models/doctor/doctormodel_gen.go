// Code generated by goctl. DO NOT EDIT.

package doctor

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	doctorFieldNames          = builder.RawFieldNames(&Doctor{}, true)
	doctorRows                = strings.Join(doctorFieldNames, ",")
	doctorRowsExpectAutoSet   = strings.Join(stringx.Remove(doctorFieldNames, "id"), ",")
	doctorRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(doctorFieldNames, "id"))

	cachePublicDoctorIdPrefix       = "cache:public:doctor:id:"
	cachePublicDoctorUsernamePrefix = "cache:public:doctor:username:"
)

type (
	doctorModel interface {
		Insert(ctx context.Context, data *Doctor) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Doctor, error)
		FindOneByUsername(ctx context.Context, username string) (*Doctor, error)
		Update(ctx context.Context, data *Doctor) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDoctorModel struct {
		sqlc.CachedConn
		table string
	}

	Doctor struct {
		Id          int64     `db:"id"`
		Username    string    `db:"username"`
		Password    string    `db:"password"`
		IsAdmin     int64     `db:"is_admin"`
		Name        string    `db:"name"`
		Phonenumber string    `db:"phonenumber"`
		UploadTime  time.Time `db:"upload_time"`
	}
)

func newDoctorModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDoctorModel {
	return &defaultDoctorModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."doctor"`,
	}
}

func (m *defaultDoctorModel) withSession(session sqlx.Session) *defaultDoctorModel {
	return &defaultDoctorModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."doctor"`,
	}
}

func (m *defaultDoctorModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicDoctorIdKey := fmt.Sprintf("%s%v", cachePublicDoctorIdPrefix, id)
	publicDoctorUsernameKey := fmt.Sprintf("%s%v", cachePublicDoctorUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicDoctorIdKey, publicDoctorUsernameKey)
	return err
}

func (m *defaultDoctorModel) FindOne(ctx context.Context, id int64) (*Doctor, error) {
	publicDoctorIdKey := fmt.Sprintf("%s%v", cachePublicDoctorIdPrefix, id)
	var resp Doctor
	err := m.QueryRowCtx(ctx, &resp, publicDoctorIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", doctorRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDoctorModel) FindOneByUsername(ctx context.Context, username string) (*Doctor, error) {
	publicDoctorUsernameKey := fmt.Sprintf("%s%v", cachePublicDoctorUsernamePrefix, username)
	var resp Doctor
	err := m.QueryRowIndexCtx(ctx, &resp, publicDoctorUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where username = $1 limit 1", doctorRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDoctorModel) Insert(ctx context.Context, data *Doctor) (sql.Result, error) {
	publicDoctorIdKey := fmt.Sprintf("%s%v", cachePublicDoctorIdPrefix, data.Id)
	publicDoctorUsernameKey := fmt.Sprintf("%s%v", cachePublicDoctorUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, doctorRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.IsAdmin, data.Name, data.Phonenumber, data.UploadTime)
	}, publicDoctorIdKey, publicDoctorUsernameKey)
	return ret, err
}

func (m *defaultDoctorModel) Update(ctx context.Context, newData *Doctor) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicDoctorIdKey := fmt.Sprintf("%s%v", cachePublicDoctorIdPrefix, data.Id)
	publicDoctorUsernameKey := fmt.Sprintf("%s%v", cachePublicDoctorUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, doctorRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Username, newData.Password, newData.IsAdmin, newData.Name, newData.Phonenumber, newData.UploadTime)
	}, publicDoctorIdKey, publicDoctorUsernameKey)
	return err
}

func (m *defaultDoctorModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicDoctorIdPrefix, primary)
}

func (m *defaultDoctorModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", doctorRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDoctorModel) tableName() string {
	return m.table
}
