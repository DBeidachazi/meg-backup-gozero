// Code generated by goctl. DO NOT EDIT.

package doctor

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	doctorInfoFieldNames          = builder.RawFieldNames(&DoctorInfo{}, true)
	doctorInfoRows                = strings.Join(doctorInfoFieldNames, ",")
	doctorInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(doctorInfoFieldNames, "id"), ",")
	doctorInfoRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(doctorInfoFieldNames, "id"))

	cachePublicDoctorInfoIdPrefix = "cache:public:doctorInfo:id:"
)

type (
	doctorInfoModel interface {
		Insert(ctx context.Context, data *DoctorInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DoctorInfo, error)
		Update(ctx context.Context, data *DoctorInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDoctorInfoModel struct {
		sqlc.CachedConn
		table string
	}

	DoctorInfo struct {
		Id              int64  `db:"id"`
		Email           string `db:"email"`
		Nickname        string `db:"nickname"`
		Regions         string `db:"regions"`
		SelfInformation string `db:"self_information"`
		SecretKey       string `db:"secret_key"`
		Did             string `db:"did"`
	}
)

func newDoctorInfoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDoctorInfoModel {
	return &defaultDoctorInfoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."doctor_info"`,
	}
}

func (m *defaultDoctorInfoModel) withSession(session sqlx.Session) *defaultDoctorInfoModel {
	return &defaultDoctorInfoModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."doctor_info"`,
	}
}

func (m *defaultDoctorInfoModel) Delete(ctx context.Context, id int64) error {
	publicDoctorInfoIdKey := fmt.Sprintf("%s%v", cachePublicDoctorInfoIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicDoctorInfoIdKey)
	return err
}

func (m *defaultDoctorInfoModel) FindOne(ctx context.Context, id int64) (*DoctorInfo, error) {
	publicDoctorInfoIdKey := fmt.Sprintf("%s%v", cachePublicDoctorInfoIdPrefix, id)
	var resp DoctorInfo
	err := m.QueryRowCtx(ctx, &resp, publicDoctorInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", doctorInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDoctorInfoModel) Insert(ctx context.Context, data *DoctorInfo) (sql.Result, error) {
	publicDoctorInfoIdKey := fmt.Sprintf("%s%v", cachePublicDoctorInfoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, doctorInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Email, data.Nickname, data.Regions, data.SelfInformation, data.SecretKey, data.Did)
	}, publicDoctorInfoIdKey)
	return ret, err
}

func (m *defaultDoctorInfoModel) Update(ctx context.Context, data *DoctorInfo) error {
	publicDoctorInfoIdKey := fmt.Sprintf("%s%v", cachePublicDoctorInfoIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, doctorInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Email, data.Nickname, data.Regions, data.SelfInformation, data.SecretKey, data.Did)
	}, publicDoctorInfoIdKey)
	return err
}

func (m *defaultDoctorInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicDoctorInfoIdPrefix, primary)
}

func (m *defaultDoctorInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", doctorInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDoctorInfoModel) tableName() string {
	return m.table
}
